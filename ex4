
#include "stm32g0xx.h"

/*Exercício 4 :
Monte dois conjuntos de 3 leds, um verde, um amarelo e um vermelho, nas
posições de um semáforo (se não tiveres as cores, não importa.).
Desenvolva um programa de controle para este semáforo de dois tempos. O
tempo de verde/vermelho deve ser de 700 ms e o tempo de amarelo aceso é
200ms. Faça a sequência Vd → Vd/Am → Vm */

int main() {
    RCC->IOPENR = 0x3f;
    GPIOA->MODER = 0x28000000;
    RCC->APBENR1 = 0x20;

    GPIOB->MODER = 0x15; // pb0, pb1, pb2
    // vd1   am1  vm1
    GPIOC->MODER = 0x15; // pc0 , pc1, pc2
    // vd2   am2   vm2

    TIM7->PSC = 15999;
    TIM7->ARR = 999;
    // t=0,1s
    TIM7->CR1 |= 0x01;

    // leds
    int cont = 0;
    // p contar quantas vezes vai passar os 100ms

    GPIOB->ODR |= 0b1;       // liga o verde da sinaleira B
    GPIOC->ODR |= 0b100;     // liga o vermelho da sinaleira C

    while (1) {
        if (TIM7->SR == 0b1) {
            // se a flag estoura
            TIM7->SR ^= 0b1;
            // zera flag

            cont++;
        }

        if (cont == 5) {
            // ligar o amarelo de 200ms
            GPIOB->ODR |= 0b10;
        }
        if (cont == 7) {
            GPIOB->ODR &= ~0b1;      // desliga o verde B
            GPIOB->ODR &= ~0b10;     // desliga o amarelo B
            GPIOB->ODR |= 0b100;     // liga o vermelho do B

            GPIOC->ODR &= ~0b100;    // desliga o vermelho
            GPIOC->ODR &= ~0b1;      // liga o verde
        }
        if (cont == 12) {
            GPIOC->ODR |= 0b10; // liga amarelo
        }
        if (cont == 14) {
            GPIOB->ODR &= ~0b100; // desliga verml
            GPIOB->ODR |= 0b1;    // ligo verde

            GPIOC->ODR |= 0b100;  // liga verm
            GPIOC->ODR &= ~0b1;   // desliga verde
            GPIOC->ODR &= ~0b10;  // desliga amarelo

            cont = 0;
        }
    }
}








#include "stm32g0xx.h"

/*Exercício 4 :
Monte dois conjuntos de 3 leds, um verde, um amarelo e um vermelho, nas
posições de um semáforo (se não tiveres as cores, não importa.).
Desenvolva um programa de controle para este semáforo de dois tempos. O
tempo de verde/vermelho deve ser de 700 ms e o tempo de amarelo aceso é
200ms. Faça a sequência Vd → Vd/Am → Vm */

/* Mapeamento em sequência:
   Semáforo 1: PB0 = vd1, PB1 = am1, PB2 = vm1
   Semáforo 2: PB3 = vd2, PB4 = am2, PB5 = vm2
*/

int main() {
     RCC->IOPENR = 0x3f;
    GPIOA->MODER = 0x28000000;
    RCC->APBENR1 = 0x20;

    // PB0..PB5 como saída
    GPIOB->MODER = 0x5555;

    // Configura TIM7 para tick de 100 ms
    TIM7->PSC = 1599;
    TIM7->ARR = 999;
    TIM7->CR1 |= 0x01;

    int cont = 0;

    // Estado inicial: S1 verde, S2 vermelho
    GPIOB->ODR = 0;
    GPIOB->ODR |= (1<<0); // vd1
    GPIOB->ODR |= (1<<5); // vm2

    while (1) {
        if (TIM7->SR & 0x1) {
            TIM7->SR &= ~0x1;
            cont++;
            if (cont >= 18) cont = 0; // ciclo de 1,8 s
        }

        // ---------------- SEMÁFORO 1 ----------------
        if (cont < 7) {
            // Verde 700 ms
            GPIOB->ODR |=  (1<<0);
            GPIOB->ODR &= ~(1<<1);
            GPIOB->ODR &= ~(1<<2);
        }
        else if (cont < 9) {
            // Verde + Amarelo 200 ms
            GPIOB->ODR |=  (1<<0);
            GPIOB->ODR |=  (1<<1);
            GPIOB->ODR &= ~(1<<2);
        }
        else {
            // Vermelho 900 ms
            GPIOB->ODR &= ~(1<<0);
            GPIOB->ODR &= ~(1<<1);
            GPIOB->ODR |=  (1<<2);
        }

        // ---------------- SEMÁFORO 2 ----------------
        if (cont < 9) {
            // Vermelho 900 ms
            GPIOB->ODR &= ~(1<<3);
            GPIOB->ODR &= ~(1<<4);
            GPIOB->ODR |=  (1<<5);
        }
        else if (cont < 16) {
            // Verde 700 ms
            GPIOB->ODR |=  (1<<3);
            GPIOB->ODR &= ~(1<<4);
            GPIOB->ODR &= ~(1<<5);
        }
        else {
            // Verde + Amarelo 200 ms
            GPIOB->ODR |=  (1<<3);
            GPIOB->ODR |=  (1<<4);
            GPIOB->ODR &= ~(1<<5);
        }
    }
}
